-- The name of your workspace will be used, for example, to name the Visual Studio .sln file generated by Premake.
workspace "Vulkan-Game"
	startproject "GameCore"

	language "C++"

	cppdialect "C++17"

	architecture "x86_64"

	configurations { "Debug", "Release" }

	filter { "configurations:Debug" }
		symbols "On"
		defines "DEBUG"

	filter { "configurations:Release" }
		optimize "On"

outputdir = "%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"


-- This function includes GLFW's header files
function includeGLFW()
	includedirs "Libraries/GLFW/Include"
end

-- This function links statically against GLFW
function linkGLFW()
	libdirs "Libraries/GLFW/Lib"

	-- Our static lib should not link against GLFW
	filter "kind:not StaticLib"
		links "glfw3"
	filter {}
end

-- This function includes Vulkan's header files
function includeVulkan()
	includedirs "Libraries/Vulkan/Include"
end

-- This function links statically against GLFW
function linkVulkan()
	libdirs "Libraries/Vulkan/Lib"

	-- Our static lib should not link against GLFW
	filter "kind:not StaticLib"
		links {
			"vulkan-1",
			"shaderc_shared"
		}
	filter {}
end

-- Our first project, the static library
project "Lib"
	location "Projects/Lib"
	-- kind is used to indicate the type of this project.
	kind "StaticLib"

	targetdir ("%{wks.location}/bin/" .. outputdir .. "/%{prj.name}")
	objdir ("%{wks.location}/bin-int/" .. outputdir .. "/%{prj.name}")

	pchheader "libpch.h"
	pchsource "Projects/Lib/src/libpch.cpp"

	files 
	{
		"Projects/Lib/**",
		"Libraries/glm/glm/**.hpp",
		"Libraries/glm/glm/**.inl"	
	}

	includedirs 
	{
		"Projects/Lib/src",
		"Libraries/glm"
	}

    defines
	{
		"_CRT_SECURE_NO_WARNINGS",
		"GLFW_INCLUDE_NONE"
	}

	includeGLFW()
	includeVulkan()

function useLib()
	-- The library's public headers
	includedirs "Projects/Lib/src"

	-- We link against a library that's in the same workspace, so we can just
	-- use the project name - premake is really smart and will handle everything for us.
	links "Lib"

	linkGLFW()
	linkVulkan()
end

project "GameCore"
	location "Projects/GameCore"
	kind "ConsoleApp"

	targetdir ("%{wks.location}/bin/" .. outputdir .. "/%{prj.name}")
	objdir ("%{wks.location}/bin-int/" .. outputdir .. "/%{prj.name}")

	files 
	{
		"Projects/GameCore/**"
	}

	-- We also need the headers
	useLib()